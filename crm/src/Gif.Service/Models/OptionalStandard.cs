/*
 * catalogue-api
 *
 * NHS Digital GP IT Futures Buying Catalog API
 *
 * OpenAPI spec version: 1.0.0-private-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Gif.Service.Models
{ 
    /// <summary>
    /// A Standard and a flag associated with a Capability through a CapabilityMapping
    /// </summary>
    [DataContract]
    public partial class OptionalStandard : IEquatable<OptionalStandard>
    { 
        /// <summary>
        /// Unique identifier of Standard
        /// </summary>
        /// <value>Unique identifier of Standard</value>
        [Required]
        [DataMember(Name="standardId")]
        public string StandardId { get; set; }

        /// <summary>
        /// True if the Standard does not have to be supported in order to support the Capability
        /// </summary>
        /// <value>True if the Standard does not have to be supported in order to support the Capability</value>
        [DataMember(Name="isOptional")]
        public bool? IsOptional { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionalStandard {\n");
            sb.Append("  StandardId: ").Append(StandardId).Append("\n");
            sb.Append("  IsOptional: ").Append(IsOptional).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OptionalStandard)obj);
        }

        /// <summary>
        /// Returns true if OptionalStandard instances are equal
        /// </summary>
        /// <param name="other">Instance of OptionalStandard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionalStandard other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StandardId == other.StandardId ||
                    StandardId != null &&
                    StandardId.Equals(other.StandardId)
                ) && 
                (
                    IsOptional == other.IsOptional ||
                    IsOptional != null &&
                    IsOptional.Equals(other.IsOptional)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StandardId != null)
                    hashCode = hashCode * 59 + StandardId.GetHashCode();
                    if (IsOptional != null)
                    hashCode = hashCode * 59 + IsOptional.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OptionalStandard left, OptionalStandard right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OptionalStandard left, OptionalStandard right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
