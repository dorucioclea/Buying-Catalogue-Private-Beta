(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports);
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports);
        global.handlebarsI18next = mod.exports;
    }
})(this, function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (Handlebars, i18next) {
        var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'i18n';

        Handlebars.registerHelper(name, function (key, _ref) {
            var hash = _ref.hash,
                data = _ref.data,
                fn = _ref.fn;

            var parsed = {};
            jsonKeys.forEach(function (key) {
                if (hash[key]) {
                    // Everything in jsonKeys is known not to belong in options.replace.
                    // Everything in hash ends up in options.replace, so we limit
                    // interpolation replacement polution by transferring these keys
                    // to parsed.
                    parsed[key] = JSON.parse(hash[key]);
                    delete hash[key];
                }
            });
            var options = extend({}, data.root.i18next, hash, parsed, { returnObjects: false });
            var replace = options.replace = extend({}, this, options.replace, hash);
            delete replace.i18next; // may creep in if this === data.root
            if (fn) options.defaultValue = fn(replace);
            return new Handlebars.SafeString(i18next.t(key, options));
        });
    };

    // These are options to i18n.t that may take array or object values.
    var jsonKeys = ['lngs', 'fallbackLng', 'ns', 'postProcess', 'interpolation'];

    // Quick polyfill for Object.assign, because IE11 doesn't have that method.
    function extend(target) {
        for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            sources[_key - 1] = arguments[_key];
        }

        sources.forEach(function (source) {
            if (source) for (var key in source) {
                target[key] = source[key];
            }
        });
        return target;
    }

    ;
});

//# sourceMappingURL=handlebars-i18next.js.map