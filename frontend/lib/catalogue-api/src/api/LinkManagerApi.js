/**
 * catalogue-api
 * NHS Digital GP IT Futures Buying Catalog API
 *
 * OpenAPI spec version: 1.0.0-private-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CatalogueApi) {
      root.CatalogueApi = {};
    }
    root.CatalogueApi.LinkManagerApi = factory(root.CatalogueApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * LinkManager service.
   * @module api/LinkManagerApi
   * @version 1.0.0-private-beta
   */

  /**
   * Constructs a new LinkManagerApi. 
   * @alias module:api/LinkManagerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a link between a Framework and a Solution
     * @param {String} frameworkId CRM identifier of Framework
     * @param {String} solutionId CRM identifier of Solution
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.apiLinkManagerFrameworkSolutionCreateByFrameworkIdBySolutionIdPostWithHttpInfo = function(frameworkId, solutionId) {
      var postBody = null;

      // verify the required parameter 'frameworkId' is set
      if (frameworkId === undefined || frameworkId === null) {
        throw new Error("Missing the required parameter 'frameworkId' when calling apiLinkManagerFrameworkSolutionCreateByFrameworkIdBySolutionIdPost");
      }

      // verify the required parameter 'solutionId' is set
      if (solutionId === undefined || solutionId === null) {
        throw new Error("Missing the required parameter 'solutionId' when calling apiLinkManagerFrameworkSolutionCreateByFrameworkIdBySolutionIdPost");
      }


      var pathParams = {
        'frameworkId': frameworkId,
        'solutionId': solutionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/LinkManager/FrameworkSolution/Create/{frameworkId}/{solutionId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a link between a Framework and a Solution
     * @param {String} frameworkId CRM identifier of Framework
     * @param {String} solutionId CRM identifier of Solution
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.apiLinkManagerFrameworkSolutionCreateByFrameworkIdBySolutionIdPost = function(frameworkId, solutionId) {
      return this.apiLinkManagerFrameworkSolutionCreateByFrameworkIdBySolutionIdPostWithHttpInfo(frameworkId, solutionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
