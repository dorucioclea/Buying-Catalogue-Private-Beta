/**
 * catalogue-api
 * NHS Digital GP IT Futures Buying Catalog API
 *
 * OpenAPI spec version: 1.0.0-private-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Frameworks', 'model/PaginatedListFrameworks'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Frameworks'), require('../model/PaginatedListFrameworks'));
  } else {
    // Browser globals (root is window)
    if (!root.CatalogueApi) {
      root.CatalogueApi = {};
    }
    root.CatalogueApi.FrameworksApi = factory(root.CatalogueApi.ApiClient, root.CatalogueApi.Frameworks, root.CatalogueApi.PaginatedListFrameworks);
  }
}(this, function(ApiClient, Frameworks, PaginatedListFrameworks) {
  'use strict';

  /**
   * Frameworks service.
   * @module api/FrameworksApi
   * @version 1.0.0-private-beta
   */

  /**
   * Constructs a new FrameworksApi. 
   * @alias module:api/FrameworksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get existing framework/s which have the given capability
     * @param {String} capabilityId CRM identifier of Capability
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaginatedListFrameworks} and HTTP response
     */
    this.apiFrameworksByCapabilityByCapabilityIdGetWithHttpInfo = function(capabilityId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'capabilityId' is set
      if (capabilityId === undefined || capabilityId === null) {
        throw new Error("Missing the required parameter 'capabilityId' when calling apiFrameworksByCapabilityByCapabilityIdGet");
      }


      var pathParams = {
        'capabilityId': capabilityId
      };
      var queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedListFrameworks;

      return this.apiClient.callApi(
        '/api/Frameworks/ByCapability/{capabilityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get existing framework/s which have the given capability
     * @param {String} capabilityId CRM identifier of Capability
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaginatedListFrameworks}
     */
    this.apiFrameworksByCapabilityByCapabilityIdGet = function(capabilityId, opts) {
      return this.apiFrameworksByCapabilityByCapabilityIdGetWithHttpInfo(capabilityId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an existing framework given its CRM identifier  Typically used to retrieve previous version
     * @param {String} id CRM identifier of framework to find
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Frameworks} and HTTP response
     */
    this.apiFrameworksByIdByIdGetWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFrameworksByIdByIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Frameworks;

      return this.apiClient.callApi(
        '/api/Frameworks/ById/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an existing framework given its CRM identifier  Typically used to retrieve previous version
     * @param {String} id CRM identifier of framework to find
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Frameworks}
     */
    this.apiFrameworksByIdByIdGet = function(id) {
      return this.apiFrameworksByIdByIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get existing framework/s on which a solution was onboarded, given the CRM identifier of the solution
     * @param {String} solutionId CRM identifier of solution
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaginatedListFrameworks} and HTTP response
     */
    this.apiFrameworksBySolutionBySolutionIdGetWithHttpInfo = function(solutionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'solutionId' is set
      if (solutionId === undefined || solutionId === null) {
        throw new Error("Missing the required parameter 'solutionId' when calling apiFrameworksBySolutionBySolutionIdGet");
      }


      var pathParams = {
        'solutionId': solutionId
      };
      var queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedListFrameworks;

      return this.apiClient.callApi(
        '/api/Frameworks/BySolution/{solutionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get existing framework/s on which a solution was onboarded, given the CRM identifier of the solution
     * @param {String} solutionId CRM identifier of solution
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaginatedListFrameworks}
     */
    this.apiFrameworksBySolutionBySolutionIdGet = function(solutionId, opts) {
      return this.apiFrameworksBySolutionBySolutionIdGetWithHttpInfo(solutionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get existing framework/s which have the given standard
     * @param {String} standardId CRM identifier of Standard
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaginatedListFrameworks} and HTTP response
     */
    this.apiFrameworksByStandardByStandardIdGetWithHttpInfo = function(standardId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'standardId' is set
      if (standardId === undefined || standardId === null) {
        throw new Error("Missing the required parameter 'standardId' when calling apiFrameworksByStandardByStandardIdGet");
      }


      var pathParams = {
        'standardId': standardId
      };
      var queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedListFrameworks;

      return this.apiClient.callApi(
        '/api/Frameworks/ByStandard/{standardId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get existing framework/s which have the given standard
     * @param {String} standardId CRM identifier of Standard
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaginatedListFrameworks}
     */
    this.apiFrameworksByStandardByStandardIdGet = function(standardId, opts) {
      return this.apiFrameworksByStandardByStandardIdGetWithHttpInfo(standardId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all current frameworks in a paged list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaginatedListFrameworks} and HTTP response
     */
    this.apiFrameworksGetWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedListFrameworks;

      return this.apiClient.callApi(
        '/api/Frameworks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all current frameworks in a paged list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaginatedListFrameworks}
     */
    this.apiFrameworksGet = function(opts) {
      return this.apiFrameworksGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
