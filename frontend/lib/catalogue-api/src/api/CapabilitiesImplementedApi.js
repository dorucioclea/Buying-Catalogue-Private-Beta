/**
 * catalogue-api
 * NHS Digital GP IT Futures Buying Catalog API
 *
 * OpenAPI spec version: 1.0.0-private-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CapabilitiesImplemented', 'model/PaginatedListCapabilitiesImplemented'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CapabilitiesImplemented'), require('../model/PaginatedListCapabilitiesImplemented'));
  } else {
    // Browser globals (root is window)
    if (!root.CatalogueApi) {
      root.CatalogueApi = {};
    }
    root.CatalogueApi.CapabilitiesImplementedApi = factory(root.CatalogueApi.ApiClient, root.CatalogueApi.CapabilitiesImplemented, root.CatalogueApi.PaginatedListCapabilitiesImplemented);
  }
}(this, function(ApiClient, CapabilitiesImplemented, PaginatedListCapabilitiesImplemented) {
  'use strict';

  /**
   * CapabilitiesImplemented service.
   * @module api/CapabilitiesImplementedApi
   * @version 1.0.0-private-beta
   */

  /**
   * Constructs a new CapabilitiesImplementedApi. 
   * @alias module:api/CapabilitiesImplementedApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Retrieve claim, given the claim’s CRM identifier
     * @param {String} id CRM identifier of claim
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CapabilitiesImplemented} and HTTP response
     */
    this.apiCapabilitiesImplementedByIdGetWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCapabilitiesImplementedByIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CapabilitiesImplemented;

      return this.apiClient.callApi(
        '/api/CapabilitiesImplemented/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve claim, given the claim’s CRM identifier
     * @param {String} id CRM identifier of claim
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CapabilitiesImplemented}
     */
    this.apiCapabilitiesImplementedByIdGet = function(id) {
      return this.apiCapabilitiesImplementedByIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all claimed capabilities for a solution in a paged list,  given the solution’s CRM identifier
     * @param {String} solutionId CRM identifier of solution
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaginatedListCapabilitiesImplemented} and HTTP response
     */
    this.apiCapabilitiesImplementedBySolutionBySolutionIdGetWithHttpInfo = function(solutionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'solutionId' is set
      if (solutionId === undefined || solutionId === null) {
        throw new Error("Missing the required parameter 'solutionId' when calling apiCapabilitiesImplementedBySolutionBySolutionIdGet");
      }


      var pathParams = {
        'solutionId': solutionId
      };
      var queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedListCapabilitiesImplemented;

      return this.apiClient.callApi(
        '/api/CapabilitiesImplemented/BySolution/{solutionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all claimed capabilities for a solution in a paged list,  given the solution’s CRM identifier
     * @param {String} solutionId CRM identifier of solution
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 1-based index of page to return.  Defaults to 1
     * @param {Number} opts.pageSize number of items per page.  Defaults to 20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaginatedListCapabilitiesImplemented}
     */
    this.apiCapabilitiesImplementedBySolutionBySolutionIdGet = function(solutionId, opts) {
      return this.apiCapabilitiesImplementedBySolutionBySolutionIdGetWithHttpInfo(solutionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing claimed capability for a solution
     * @param {Object} opts Optional parameters
     * @param {module:model/CapabilitiesImplemented} opts.claimedcapability existing claimed capability information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.apiCapabilitiesImplementedDeleteWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['claimedcapability'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/CapabilitiesImplemented', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing claimed capability for a solution
     * @param {Object} opts Optional parameters
     * @param {module:model/CapabilitiesImplemented} opts.claimedcapability existing claimed capability information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.apiCapabilitiesImplementedDelete = function(opts) {
      return this.apiCapabilitiesImplementedDeleteWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new claimed capability for a solution
     * @param {Object} opts Optional parameters
     * @param {module:model/CapabilitiesImplemented} opts.claimedcapability new claimed capability information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CapabilitiesImplemented} and HTTP response
     */
    this.apiCapabilitiesImplementedPostWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['claimedcapability'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = CapabilitiesImplemented;

      return this.apiClient.callApi(
        '/api/CapabilitiesImplemented', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new claimed capability for a solution
     * @param {Object} opts Optional parameters
     * @param {module:model/CapabilitiesImplemented} opts.claimedcapability new claimed capability information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CapabilitiesImplemented}
     */
    this.apiCapabilitiesImplementedPost = function(opts) {
      return this.apiCapabilitiesImplementedPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing claimed capability with new information
     * @param {Object} opts Optional parameters
     * @param {module:model/CapabilitiesImplemented} opts.claimedcapability claimed capability with updated information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.apiCapabilitiesImplementedPutWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['claimedcapability'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'oauth2'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/CapabilitiesImplemented', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing claimed capability with new information
     * @param {Object} opts Optional parameters
     * @param {module:model/CapabilitiesImplemented} opts.claimedcapability claimed capability with updated information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.apiCapabilitiesImplementedPut = function(opts) {
      return this.apiCapabilitiesImplementedPutWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
