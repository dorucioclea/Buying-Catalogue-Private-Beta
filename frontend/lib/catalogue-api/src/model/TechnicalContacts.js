/**
 * catalogue-api
 * NHS Digital GP IT Futures Buying Catalog API
 *
 * OpenAPI spec version: 1.0.0-private-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CatalogueApi) {
      root.CatalogueApi = {};
    }
    root.CatalogueApi.TechnicalContacts = factory(root.CatalogueApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The TechnicalContacts model module.
   * @module model/TechnicalContacts
   * @version 1.0.0-private-beta
   */

  /**
   * Constructs a new <code>TechnicalContacts</code>.
   * A means of communicating with an Organisation, typically a person, email address, telephone number etc,  in the context of a Solution
   * @alias module:model/TechnicalContacts
   * @class
   * @param id {String} Unique identifier of entity
   * @param solutionId {String} Unique identifier of Solution
   * @param contactType {String} Description of type of TechnicalContact eg  <list type=\"bullet\">  Lead Contact  Technical Contact  Executive Sponsor  Clinical Safety Officer  Connection Agreement Signatory  Other...  </list>
   * @param emailAddress {String} Primary email address of contact
   */
  var exports = function(id, solutionId, contactType, emailAddress) {
    var _this = this;

    _this['id'] = id;
    _this['solutionId'] = solutionId;
    _this['contactType'] = contactType;


    _this['emailAddress'] = emailAddress;

  };

  /**
   * Constructs a <code>TechnicalContacts</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TechnicalContacts} obj Optional instance to populate.
   * @return {module:model/TechnicalContacts} The populated <code>TechnicalContacts</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('solutionId')) {
        obj['solutionId'] = ApiClient.convertToType(data['solutionId'], 'String');
      }
      if (data.hasOwnProperty('contactType')) {
        obj['contactType'] = ApiClient.convertToType(data['contactType'], 'String');
      }
      if (data.hasOwnProperty('firstName')) {
        obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
      }
      if (data.hasOwnProperty('lastName')) {
        obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
      }
      if (data.hasOwnProperty('emailAddress')) {
        obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
      }
      if (data.hasOwnProperty('phoneNumber')) {
        obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
      }
    }
    return obj;
  }

  /**
   * Unique identifier of entity
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Unique identifier of Solution
   * @member {String} solutionId
   */
  exports.prototype['solutionId'] = undefined;
  /**
   * Description of type of TechnicalContact eg  <list type=\"bullet\">  Lead Contact  Technical Contact  Executive Sponsor  Clinical Safety Officer  Connection Agreement Signatory  Other...  </list>
   * @member {String} contactType
   */
  exports.prototype['contactType'] = undefined;
  /**
   * First name of contact
   * @member {String} firstName
   */
  exports.prototype['firstName'] = undefined;
  /**
   * Last name of contact
   * @member {String} lastName
   */
  exports.prototype['lastName'] = undefined;
  /**
   * Primary email address of contact
   * @member {String} emailAddress
   */
  exports.prototype['emailAddress'] = undefined;
  /**
   * Primary phone number of contact
   * @member {String} phoneNumber
   */
  exports.prototype['phoneNumber'] = undefined;



  return exports;
}));


